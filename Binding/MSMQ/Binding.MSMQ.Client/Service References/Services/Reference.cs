//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Binding.MSMQ.Client.Services {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://Microsoft.ServiceModel.Samples", ConfigurationName="Services.IQueueCalculator")]
    public interface IQueueCalculator {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://Microsoft.ServiceModel.Samples/IQueueCalculator/Add")]
        void Add(double n1, double n2);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://Microsoft.ServiceModel.Samples/IQueueCalculator/Add")]
        System.Threading.Tasks.Task AddAsync(double n1, double n2);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://Microsoft.ServiceModel.Samples/IQueueCalculator/Subtract")]
        void Subtract(double n1, double n2);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://Microsoft.ServiceModel.Samples/IQueueCalculator/Subtract")]
        System.Threading.Tasks.Task SubtractAsync(double n1, double n2);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://Microsoft.ServiceModel.Samples/IQueueCalculator/Multiply")]
        void Multiply(double n1, double n2);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://Microsoft.ServiceModel.Samples/IQueueCalculator/Multiply")]
        System.Threading.Tasks.Task MultiplyAsync(double n1, double n2);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://Microsoft.ServiceModel.Samples/IQueueCalculator/Divide")]
        void Divide(double n1, double n2);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://Microsoft.ServiceModel.Samples/IQueueCalculator/Divide")]
        System.Threading.Tasks.Task DivideAsync(double n1, double n2);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IQueueCalculatorChannel : Binding.MSMQ.Client.Services.IQueueCalculator, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class QueueCalculatorClient : System.ServiceModel.ClientBase<Binding.MSMQ.Client.Services.IQueueCalculator>, Binding.MSMQ.Client.Services.IQueueCalculator {
        
        public QueueCalculatorClient() {
        }
        
        public QueueCalculatorClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public QueueCalculatorClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public QueueCalculatorClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public QueueCalculatorClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void Add(double n1, double n2) {
            base.Channel.Add(n1, n2);
        }
        
        public System.Threading.Tasks.Task AddAsync(double n1, double n2) {
            return base.Channel.AddAsync(n1, n2);
        }
        
        public void Subtract(double n1, double n2) {
            base.Channel.Subtract(n1, n2);
        }
        
        public System.Threading.Tasks.Task SubtractAsync(double n1, double n2) {
            return base.Channel.SubtractAsync(n1, n2);
        }
        
        public void Multiply(double n1, double n2) {
            base.Channel.Multiply(n1, n2);
        }
        
        public System.Threading.Tasks.Task MultiplyAsync(double n1, double n2) {
            return base.Channel.MultiplyAsync(n1, n2);
        }
        
        public void Divide(double n1, double n2) {
            base.Channel.Divide(n1, n2);
        }
        
        public System.Threading.Tasks.Task DivideAsync(double n1, double n2) {
            return base.Channel.DivideAsync(n1, n2);
        }
    }
}
